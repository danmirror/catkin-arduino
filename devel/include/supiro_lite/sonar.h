// Generated by gencpp from file supiro_lite/sonar.msg
// DO NOT EDIT!


#ifndef SUPIRO_LITE_MESSAGE_SONAR_H
#define SUPIRO_LITE_MESSAGE_SONAR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace supiro_lite
{
template <class ContainerAllocator>
struct sonar_
{
  typedef sonar_<ContainerAllocator> Type;

  sonar_()
    : servopos(0)
    , pingval(0)  {
    }
  sonar_(const ContainerAllocator& _alloc)
    : servopos(0)
    , pingval(0)  {
  (void)_alloc;
    }



   typedef int16_t _servopos_type;
  _servopos_type servopos;

   typedef int16_t _pingval_type;
  _pingval_type pingval;





  typedef boost::shared_ptr< ::supiro_lite::sonar_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::supiro_lite::sonar_<ContainerAllocator> const> ConstPtr;

}; // struct sonar_

typedef ::supiro_lite::sonar_<std::allocator<void> > sonar;

typedef boost::shared_ptr< ::supiro_lite::sonar > sonarPtr;
typedef boost::shared_ptr< ::supiro_lite::sonar const> sonarConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::supiro_lite::sonar_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::supiro_lite::sonar_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace supiro_lite

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'supiro_lite': ['/home/danu/catkin_custom/catkin_arduino/src/supiro_lite/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::supiro_lite::sonar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::supiro_lite::sonar_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::supiro_lite::sonar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::supiro_lite::sonar_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::supiro_lite::sonar_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::supiro_lite::sonar_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::supiro_lite::sonar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d0f1d004e38a764fd0851cbe630d9906";
  }

  static const char* value(const ::supiro_lite::sonar_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd0f1d004e38a764fULL;
  static const uint64_t static_value2 = 0xd0851cbe630d9906ULL;
};

template<class ContainerAllocator>
struct DataType< ::supiro_lite::sonar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "supiro_lite/sonar";
  }

  static const char* value(const ::supiro_lite::sonar_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::supiro_lite::sonar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 servopos\n\
int16 pingval\n\
";
  }

  static const char* value(const ::supiro_lite::sonar_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::supiro_lite::sonar_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.servopos);
      stream.next(m.pingval);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sonar_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::supiro_lite::sonar_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::supiro_lite::sonar_<ContainerAllocator>& v)
  {
    s << indent << "servopos: ";
    Printer<int16_t>::stream(s, indent + "  ", v.servopos);
    s << indent << "pingval: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pingval);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUPIRO_LITE_MESSAGE_SONAR_H
